import yt_dlp
import os
import logging
from pyrogram import Client, errors
from pyrogram.enums import ParseMode
from aiogram.types import FSInputFile, InputFile
import asyncio
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
DOWNLOAD_PROGRESS = {}

# –•—É–∫ –¥–ª—è yt-dlp, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
def progress_hook(d):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å DOWNLOAD_PROGRESS.
    """
    if d['status'] == 'downloading':
        file_id = d['info_dict']['id']
        percent_str = d.get('_percent_str', '0%').strip()
        DOWNLOAD_PROGRESS[file_id] = percent_str

async def send_download_progress(message, file_id, total_videos, current_video_num):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    progress_message = await message.reply_text("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...", parse_mode=ParseMode.HTML)
    
    while file_id in DOWNLOAD_PROGRESS:
        progress_text = DOWNLOAD_PROGRESS[file_id]
        if total_videos > 1:
            progress_text = f"–ó–∞–≥—Ä—É–∑–∫–∞ {current_video_num}/{total_videos}: {progress_text}"
        await progress_message.edit_text(
            f"üì• **–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞...**\n`{progress_text}`",
            parse_mode=ParseMode.MARKDOWN
        )
        await asyncio.sleep(2) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    await progress_message.delete()

async def download_and_send_video(client, message, url, format_id, is_premium):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ.
    """
    try:
        ydl_opts = {
            'format': format_id,
            'outtmpl': '%(title)s.%(ext)s',
            'progress_hooks': [progress_hook]
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=False)
            filesize = info_dict.get('filesize', 0)
            
            file_limit = 4 * 1024 * 1024 * 1024 if is_premium else 2 * 1024 * 1024 * 1024
            
            if filesize > file_limit:
                if is_premium:
                    await message.reply_text("‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!**\n–õ–∏–º–∏—Ç –¥–ª—è Premium-–∞–∫–∫–∞—É–Ω—Ç–∞ 4 –ì–ë.", parse_mode=ParseMode.MARKDOWN)
                else:
                    await message.reply_text("‚ö†Ô∏è **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!**\n–õ–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 2 –ì–ë. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.", parse_mode=ParseMode.MARKDOWN)
                return
            
            file_id = info_dict['id']
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task = asyncio.create_task(send_download_progress(message, file_id, 1, 1))

            ydl.download([url])
            
            video_title = info_dict.get('title', 'video')
            filename = ydl.prepare_filename(info_dict)
            
            await client.send_document(
                chat_id=message.chat.id,
                document=filename,
                caption=f"üé• **{video_title}**\n\nüéâ –í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!",
                parse_mode=ParseMode.MARKDOWN
            )

            if file_id in DOWNLOAD_PROGRESS:
                del DOWNLOAD_PROGRESS[file_id]

            os.remove(filename)

    except errors.FloodWait as e:
        await message.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥...", parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.", parse_mode=ParseMode.HTML)


async def download_playlist(client, message, url, is_premium):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.
    """
    if not is_premium:
        await message.reply_text("‚ö†Ô∏è **–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium-–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.**\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        await message.reply_text("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–µ–π–ª–∏—Å—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
        
        ydl_opts = {
            'format': 'bestvideo+bestaudio/best',
            'outtmpl': '%(playlist_index)s - %(title)s.%(ext)s',
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            playlist_info = ydl.extract_info(url, download=False)
            
            if 'entries' not in playlist_info:
                await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –≤ —ç—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.", parse_mode=ParseMode.HTML)
                return

            total_videos = len(playlist_info['entries'])
            
            for i, video_info in enumerate(playlist_info['entries']):
                video_url = video_info['url']
                video_title = video_info['title']
                video_id = video_info['id']

                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ?" –∫–∞–∂–¥—ã–µ 100 –≤–∏–¥–µ–æ
                if (i + 1) % 100 == 0:
                    # –õ–æ–≥–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    pass

                await download_and_send_video(client, message, video_url, 'bestvideo+bestaudio/best', is_premium)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞.", parse_mode=ParseMode.HTML)


async def handle_web_app_data(client, message, is_premium):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ Web App.
    """
    try:
        data = json.loads(message.web_app_data.data)
        url = data.get('url')
        format_id = data.get('format_id')
        
        if url and format_id:
            await download_and_send_video(client, message, url, format_id, is_premium)
        else:
            await message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App.", parse_mode=ParseMode.HTML)

    except json.JSONDecodeError:
        await message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App.", parse_mode=ParseMode.HTML)